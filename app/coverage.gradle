def coverageSourceDirs = [
        'src/main/java',
        'src/debug/java',
        'src/mock/java',
        'src/prod/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn : 'test') {
    description = 'Generate JaCoCo coverage reports'
    group       = 'Reporting'

    reports {
        xml.enabled  = true
        html.enabled = true
    }

    classDirectories = fileTree(
            dir      : 'build/intermediates/classes/mock/debug',
            excludes : [
                    '**/R.class',
                    '**/R$*.class',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*RealmProxy.*',
                    '**/*ColumnInfo.*',
                    '**/*RealmModule*.*',
                    '**/AutoValue_*.*',
                    '**/Dagger*.*',
                    '**/*Module_Provide*Factory.*',
                    '**/*_Factory.*',
                    '**/*_MembersInjector.*',
                    '**/*_LifecycleAdapter.*',
                    '**/*Query$*',
                    '**/*Query.*',
                    '**/com/andela/mrm/fragment',
                    '**/com/andela/mrm/type',
                    '**/*_ViewBinding.*'
            ]
    )

    sourceDirectories = files(coverageSourceDirs)
    executionData     = fileTree(
            dir     : "$buildDir",
            include : ['**/*.exec', '**/*.ec']
    )

    doFirst {
        files('build/intermediates/classes/mock/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

task unifiedCoverageReport(dependsOn: ['clean', 'createMockDebugCoverageReport', 'jacocoTestReport']) {
    description = 'Generates coverage report which includes both local unit tests and instrumentation tests'
    group = 'Reporting'
}

