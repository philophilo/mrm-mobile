default: &defaults
  docker:
  - image: circleci/android:api-26-alpha
  working_directory: ~/repo
  environment:
  TERM: dumb
  # Customize the JVM maximuum heap limit
  _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
  GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'

gcloud_config: &gcloud_config
  working_directory: ~/repo
  docker:
    - image: google/cloud-sdk:latest
  environment:
  TERM: dumb

workspace: &workspace
    ~/repo
attach_debug_workspace: &attach_debug_workspace
  attach_workspace:
    at: *workspace

persist_firebase_workspace: &persist_firebase_workspace
  persist_to_workspace:
    root: *workspace
    paths:
      - firebase

# Google Services From Firebase (JSON)

export_gservices_key: &export_gservices_key
  run:
    name: Export Google Services key environment variable
    command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV

export_failure_determinant: &failure_determinant
  run:
    name: Export Failure Determinant
    when: on_success
    command: |
      echo 'export INSTRUMENT_TEST_ARTIFACT=exempted' >> $BASH_ENV
decode_gservices_key: &decode_gservices_key
  run:
    name: Decode Google Services JSON key
    command: |
      mkdir app/src/prod/release
      mkdir app/src/prod/debug
      mkdir app/src/mock/debug
      mkdir app/src/mock/release
      touch app/src/prod/release/google-services.json
      touch app/src/prod/debug/google-services.json
      touch app/src/mock/release/google-services.json
      touch app/src/mock/debug/google-services.json
      touch app/google-services.json
      echo $GOOGLE_SERVICES_JSON | base64 --decode >> app/src/mock/debug/google-services.json
      echo $GOOGLE_SERVICES_JSON | base64 --decode >> app/src/mock/release/google-services.json
      echo $GOOGLE_SERVICES_JSON | base64 --decode >> app/src/prod/debug/google-services.json
      echo $GOOGLE_SERVICES_JSON | base64 --decode >> app/src/prod/release/google-services.json
      echo $GOOGLE_SERVICES_JSON | base64 --decode >> app/google-services.json
# Google Cloud Service Account Key

export_gcloud_key: &export_gcloud_key
  run:
    name: Export Google Cloud Service Account Key Environment Variable
    command: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV

decode_gcloud_key: &decode_gcloud_key
  run:
    name: Decode Google Cloud Credentials
    command: |
      touch client-secret.json
      echo $GCLOUD_SERVICE_KEY | base64 --decode >> client-secret.json
persist_debug_workspace: &persist_debug_workspace
  persist_to_workspace:
    root: *workspace
    paths:
      - app/build/intermediates
      - app/build/outputs/androidTest-results
      - app/build/outputs/apk
      - app/build/outputs/code-coverage
      - app/build/test-results

version: 2
jobs:
  android_lint:
    <<: *defaults
    steps:
      - checkout
      # setup Keystore Environment for downloading necessary assets to use for deployment
      - run:
          name: Setup Keystore Environment
          command: |
            bash ~/repo/.circleci/keystore_setup.sh
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - *export_gservices_key
      - *decode_gservices_key

      # Running static analysis tools
      - run:
          name: Running quality checks
          command: |
            echo "Run android lint"
            cd ~/repo
            ./gradlew lint
      # Storing reports
      - store_artifacts:
          path: ~/repo/app/build/reports

      # Sending notification
      - run:
          name: Notifying slack channel (succeeded)
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel (failed)
          when: on_fail
          command: |
            bash ~/repo/.circleci/notify_slack_fail.sh
  findbugs_lint:
    <<: *defaults
    steps:
      - checkout
      # setup Keystore Environment for downloading necessary assets to use for deployment
      - run:
          name: Setup Keystore Environment
          command: |
            bash ~/repo/.circleci/keystore_setup.sh
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - *export_gservices_key
      - *decode_gservices_key
      # Running static analysis tools
      - run:
          name: Running quality checks
          command: |
            echo "Run findbugs"
            cd ~/repo
            ./gradlew assemble
            ./gradlew findbugs
      - *persist_debug_workspace

      # Storing reports
      - store_artifacts:
          path: ~/repo/app/build/outputs

      # Sending notification
      - run:
          name: Notifying slack channel (succeeded)
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel (failed)
          when: on_fail
          command: |
            bash ~/repo/.circleci/notify_slack_fail.sh
  pmd_lint:
    <<: *defaults
    steps:
      - checkout
      # setup Keystore Environment for downloading necessary assets to use for deployment
      - run:
          name: Setup Keystore Environment
          command: |
            bash ~/repo/.circleci/keystore_setup.sh
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - *export_gservices_key
      - *decode_gservices_key

      # Running static analysis tools
      - run:
          name: Running quality checks
          command: |
            echo "Run PMD"
            cd ~/repo
            ./gradlew pmd
      # Storing reports
      - store_artifacts:
          path: ~/repo/app/build

      # Sending notification
      - run:
            name: Notifying slack channel (succeeded)
            when: on_success
            command: |
                bash ~/repo/.circleci/notify_slack.sh
      - run:
            name: Notifying slack channel (failed)
            when: on_fail
            command: |
                bash ~/repo/.circleci/notify_slack_fail.sh
  checkstyle_lint:
    <<: *defaults
    steps:
      - checkout
      # setup Keystore Environment for downloading necessary assets to use for deployment
      - run:
          name: Setup Keystore Environment
          command: |
            bash ~/repo/.circleci/keystore_setup.sh
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to usiing the latest cache if no exact match is found
          - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
              - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - *export_gservices_key
      - *decode_gservices_key

        # Running static analysis tools
      - run:
          name: Running quality checks
          command: |
            echo "Run checkstyle"
            cd ~/repo
            ./gradlew checkstyle
        # Storing reports
      - store_artifacts:
          path: ~/repo/app/build/reports

        # Sending notification
      - run:
          name: Notifying slack channel (succeeded)
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel (failed)
          when: on_fail
          command: |
            bash ~/repo/.circleci/notify_slack_fail.sh
  test_unit:
    <<: *defaults
    steps:
      - checkout
      # setup Keystore Environment for downloading necessary assets to use for deployment
      - run:
          name: Setup Keystore Environment
          command: |
            bash ~/repo/.circleci/keystore_setup.sh
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - *export_gservices_key
      - *decode_gservices_key

      # Running unit tests
      - run:
          name: Running unit tests on source code
          command: |
            cd ~/repo
            ./gradlew test
            ls -a app/build/outputs/logs
      - *persist_debug_workspace

      #Storing unit test reports
      - store_artifacts:
          path: ~/repo/app/build/reports
          destination: reports
      - store_artifacts:
          path: ~/repo/app/build/outputs/androidTest-results
          destination: reports

      # Sending notification
      - run:
          name: Notifying slack channel on succeed
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: |
            bash ~/repo/.circleci/notify_slack_fail.sh
  ## Build debug APK and instrumented test APK
  deploy_test_build:
    <<: *defaults
    steps:
      - checkout
      # setup Keystore Environment for downloading necessary assets to use for deployment
      - run:
          name: Setup Keystore Environment
          command: |
            bash ~/repo/.circleci/keystore_setup.sh
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
              - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Gradle build (debug)
          command: ./gradlew -PciBuild=true :app:assembleDebug :app:assembleAndroidTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/
      - store_artifacts:
          path: ~/repo/app/build/reports
          destination: reports

      # Sending notification
      - run:
          name: Notifying slack channel on succeed
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: |
            bash ~/repo/.circleci/notify_slack_fail.sh
  deploy_staging_build:
    <<: *defaults
    steps:
      - checkout
      # setup Keystore Environment for downloading necessary assets to use for deployment
      - run:
          name: Setup Keystore Environment
          command: |
            bash ~/repo/.circleci/keystore_setup.sh
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
              - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Gradle build (debug)
          command: ./gradlew -PciBuild=true :app:assembleDebug :app:assembleAndroidTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/
      - store_artifacts:
          path: ~/repo/app/build/reports
          destination: reports

      # Sending notification
      - run:
          name: Notifying slack channel on succeed
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: |
            bash ~/repo/.circleci/notify_slack_fail.sh
      # Sending notification
      - run:
          name: Notifying slack channel on succeed
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: |
            bash ~/repo/.circleci/notify_slack_fail.sh
  deploy_production_build:
    <<: *defaults
    steps:
      - checkout
      # setup Keystore Environment for downloading necessary assets to use for deployment
      - run:
          name: Setup Keystore Environment
          command: |
            bash ~/repo/.circleci/keystore_setup.sh
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: ./gradlew androidDependencies
      - save_cache:
          paths:
              - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Gradle build (Release)
          command: ./gradlew -PciBuild=true :app:assembleProdRelease :app:assembleAndroidTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/
      - store_artifacts:
          path: ~/repo/app/build/reports
          destination: reports

    # Sending notification
      - run:
          name: Notifying slack channel on succeed
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: |
            bash ~/repo/.circleci/notify_slack_fail.sh
    ## Run instrumentation tests
  test_instrumentation:
    <<: *gcloud_config
    steps:
      - checkout
      - *attach_debug_workspace
      - *export_gcloud_key
      - *decode_gcloud_key
      - *failure_determinant
      - run:
          name: Set Google Cloud target project
          command: gcloud config set project andela-learning
      - run:
          name: Authenticate with Google Cloud
          command: gcloud auth activate-service-account mrm-android-editor@andela-learning.iam.gserviceaccount.com --key-file client-secret.json && gcloud firebase test android models list
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: |
            if [ "${INSTRUMENT_TEST_ARTIFACT}" == exempted ]; then
              bash ~/repo/.circleci/notify_slack_fail.sh
            fi
      - run:
          name: Modify Failure Determinant
          when: on_success
          command: |
            echo 'export INSTRUMENT_TEST_ARTIFACT=required' >> $BASH_ENV
      - run:
          name: Run instrumented test on Firebase Test Lab
          when: on_success
          command: |
            gcloud firebase test android run --type instrumentation --app app/build/outputs/apk/mock/debug/app-mock-debug.apk --test app/build/outputs/apk/androidTest/mock/debug/app-mock-debug-androidTest.apk --device model=Nexus7,version=22,locale=en,orientation=landscape --environment-variables coverage=true,coverageFile=/sdcard/coverage.ec --directories-to-pull=/sdcard --timeout 20m > results 2>error
            cat error
            cat results
            cat error | grep -o 'https://[^"]*' | grep 'https://console.developers.google.com/storage/browser/test-lab-[a-z0-9.-]*' | tr -d '\]' > artifact_url
      - run:
          name: Print firebase error results
          when: on_fail
          command: |
            ls -la
            file="$(ls error)"
            echo $file
            if [ $file == "error" ]; then
              cat error
            fi
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run:
          name: Download instrumented test results from Firebase Test Lab on success
          command: |
            python get_artifact_path.py
            artifact_path = "$(cat artifact_path)"
            gsutil -m cp -r -U "${artifact_path}" /root/repo/firebase/ || true
      - *persist_firebase_workspace
      - store_artifacts:
          when: on_success
          path: firebase/
          destination: /firebase/

    # Sending notification
      - run:
          name: Notifying slack channel on succeed
          when: on_success
          command: |
            bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Download instrumented test results from Firebase Test Lab on fail fail
          when: on_fail
          command: |
            if [ "$INSTRUMENT_TEST_ARTIFACT" == required ]; then
              mkdir firebase
              python get_artifact_path.py
              artifact_path = "$(cat artifact_path)"
              gsutil -m cp -r -U "${artifact_path}" /root/repo/firebase/ || true
            fi
      - store_artifacts:
          when: on_fail
          path: firebase/
          destination: /firebase/
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: |
            if [ "$INSTRUMENT_TEST_ARTIFACT" == required ]; then
              bash ~/repo/.circleci/notify_slack_fail.sh
            fi
  report_coverage:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Setup Keystore Environment
          command: |
            bash ~/repo/.circleci/keystore_setup.sh
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          - v1-dependencies-
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *attach_debug_workspace
      - run:
          name: Move Firebase Coverage Report
          command: |
            mkdir -p app/build/outputs/code-coverage/connected/flavors/MOCK
            cp firebase/Nexus7-22-en-landscape/artifacts/coverage.ec app/build/outputs/code-coverage/connected/flavors/MOCK/coverage.ec
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Code Climate Test Setup
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Code Climate Pretest
          command: ./cc-test-reporter before-build
      - run:
          name: Generate JaCoCo report
          command: ./gradlew jacocoTestReport
      - run:
          name: Upload coverage to code climate
          command: |
            export JACOCO_SOURCE_PATH=app/src/main/java
            cp app/src/prod/java/com/andela/mrm/Injection.java app/src/main/java/com/andela/mrm/Injection.java
            ./cc-test-reporter format-coverage app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml -t jacoco
            ./cc-test-reporter upload-coverage
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      # Sending notification
      - run:
          name: Notifying Slack Channel on Succeed
          when: on_success
          command: bash ~/repo/.circleci/notify_slack.sh
      - run:
          name: Notifying slack channel on fail
          when: on_fail
          command: bash ~/repo/.circleci/notify_slack_fail.sh

workflows:
  version: 2
  lint_test_and_deployment:
    jobs:
    #   - android_lint
    #   - findbugs_lint
    #   - pmd_lint
    #   - checkstyle_lint
    #   - test_unit:
    #       requires:
    #         - android_lint
    #         - findbugs_lint
    #         - pmd_lint
    #         - checkstyle_lint
      - deploy_test_build
    #       requires:
    #         - test_unit
    #   - deploy_staging_build:
    #       requires:
    #         - test_unit
    #       filters:
    #         branches:
    #           only: staging
    #   - deploy_production_build:
    #       requires:
    #         - test_unit
    #         - deploy_test_build
    #       filters:
    #         branches:
    #           only: master
      - test_instrumentation:
          requires:
            - deploy_test_build
    #   - report_coverage:
    #       requires:
    #         - test_instrumentation
